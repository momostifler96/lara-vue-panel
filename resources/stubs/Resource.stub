<?php

namespace App\LVP\Resources{{namespace}};

use LVP\Modules\Resource\Resource;
use LVP\Table\TextColumn;
use LVP\Widgets\DataWidgets\Actions\DataActionButton;

class {{class}}Resource extends Resource
{

    protected string $model = {{model}};
    protected array $model_appends = [];
    protected array $model_with = [];
    protected string $model_primary_key = 'id';


    /**
     * @return \LVP\Widgets\FormWidget\Fields\FormFieldWidget[]
     */
    public function formFields(): array
    {
        return [
            
        ];
    }


    /**
     * @return \LVP\Facades\TableColumn[]
     */
    protected function dataColumns(): array
    {
        return [
           
        ];
    }

     /**
     * @return \LVP\Widgets\DataWidgets\Filters\DataFilterField[]
     */
    protected function dataFilters(): array
    {
        return [

        ];
    }

    /**
     * @return \LVP\Widgets\DataWidgets\Actions\DataActionButton[]
     */

    protected function dataActions(): array
    {
        return [
            DataActionButton::make('edit'),
            DataActionButton::make('delete')->color('text-lvp-danger'),
        ];
    }
     /**
     * @return DataActionButton[]
     */
    protected function dataActionsGroup(): array
    {
        return [
            DataActionButton::make('delete')->color('text-lvp-danger'),
        ];
    }

    //Store model hooks 
    public function beforeStoreModel(array $formData, Request $request): array
    {
        $formData['password'] = 'Password1234';
        return $formData;
    }
    protected function afterStoreModel(Model $model, array $formData, Request $request)
    {
    }
    protected function onStoreModelFail(\Exception $exception, array $formData, Request $request)
    {
    }

    //Update model hooks 
    public function beforeUpdateModel(Model $model, array $formData, Request $request): array
    {
        return $formData;
    }

    protected function afterUpdateModel(Model $model, array $formData, Request $request)
    {
    }
    protected function onUpdateModelFail(\Exception $exception, Model $model, array $formData, Request $request)
    {
    }
    
    //Delete model hooks 
    protected function beforeDeleteModel(array $models_id, Request $request): array
    {
        return $models_id;
    }
    protected function afterDeleteModel(array $models_id, Request $request)
    {
    }
    protected function onDeleteModelFail(\Exception $exception, array $models_id, Request $request)
    {
    }
}
